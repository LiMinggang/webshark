diff --git a/epan/column.c b/epan/column.c
index 6d4fa62..0fe3b3f 100644
--- a/epan/column.c
+++ b/epan/column.c
@@ -807,23 +807,18 @@ get_column_tooltip(const gint col)
     return g_string_free (column_tooltip, FALSE);
 }
 
+WS_DLL_PUBLIC void col_finalize(column_info *cinfo);
+
 void
-build_column_format_array(column_info *cinfo, const gint num_cols, const gboolean reset_fences)
+col_finalize(column_info *cinfo)
 {
   int i;
   col_item_t* col_item;
 
-  /* Build the column format array */
-  col_setup(cinfo, num_cols);
-
   for (i = 0; i < cinfo->num_cols; i++) {
     col_item = &cinfo->columns[i];
-    col_item->col_fmt = get_column_format(i);
-    col_item->col_title = g_strdup(get_column_title(i));
 
     if (col_item->col_fmt == COL_CUSTOM) {
-      col_item->col_custom_fields = g_strdup(get_column_custom_fields(i));
-      col_item->col_custom_occurrence = get_column_custom_occurrence(i);
       if(!dfilter_compile(col_item->col_custom_fields, &col_item->col_custom_dfilter, NULL)) {
         /* XXX: Should we issue a warning? */
         g_free(col_item->col_custom_fields);
@@ -863,9 +858,6 @@ build_column_format_array(column_info *cinfo, const gint num_cols, const gboolea
     else
       col_item->col_buf = (gchar *) g_malloc(sizeof(gchar) * COL_MAX_LEN);
 
-    if(reset_fences)
-      col_item->col_fence = 0;
-
     cinfo->col_expr.col_expr[i] = "";
     cinfo->col_expr.col_expr_val[i] = (gchar *) g_malloc(sizeof(gchar) * COL_MAX_LEN);
   }
@@ -888,6 +880,31 @@ build_column_format_array(column_info *cinfo, const gint num_cols, const gboolea
   }
 }
 
+void
+build_column_format_array(column_info *cinfo, const gint num_cols, const gboolean reset_fences)
+{
+  int i;
+  col_item_t* col_item;
+
+  /* Build the column format array */
+  col_setup(cinfo, num_cols);
+
+  for (i = 0; i < cinfo->num_cols; i++) {
+    col_item = &cinfo->columns[i];
+    col_item->col_fmt = get_column_format(i);
+    col_item->col_title = g_strdup(get_column_title(i));
+    if (col_item->col_fmt == COL_CUSTOM) {
+      col_item->col_custom_fields = g_strdup(get_column_custom_fields(i));
+      col_item->col_custom_occurrence = get_column_custom_occurrence(i);
+    }
+
+    if(reset_fences)
+      col_item->col_fence = 0;
+  }
+
+  col_finalize(cinfo);
+}
+
 /*
  * Editor modelines  -  http://www.wireshark.org/tools/modelines.html
  *
diff --git a/ui/tap-sequence-analysis.c b/ui/tap-sequence-analysis.c
index eda3b04..4dc7282 100644
--- a/ui/tap-sequence-analysis.c
+++ b/ui/tap-sequence-analysis.c
@@ -77,7 +77,7 @@ void sequence_analysis_info_free(seq_analysis_info_t *sainfo)
 /****************************************************************************/
 /* whenever a frame packet is seen by the tap listener */
 /* Add a new frame into the graph */
-static gboolean
+gboolean
 seq_analysis_frame_packet( void *ptr, packet_info *pinfo, epan_dissect_t *edt _U_, const void *dummy _U_)
 {
     seq_analysis_info_t *sainfo = (seq_analysis_info_t *) ptr;
@@ -190,7 +190,7 @@ seq_analysis_frame_packet( void *ptr, packet_info *pinfo, epan_dissect_t *edt _U
 /****************************************************************************/
 /* whenever a TCP packet is seen by the tap listener */
 /* Add a new tcp frame into the graph */
-static gboolean
+gboolean
 seq_analysis_tcp_packet( void *ptr, packet_info *pinfo, epan_dissect_t *edt _U_, const void *tcp_info)
 {
     seq_analysis_info_t *sainfo = (seq_analysis_info_t *) ptr;
@@ -291,7 +291,7 @@ sequence_analysis_list_get(capture_file *cf, seq_analysis_info_t *sainfo)
         return;
     }
 
-    cf_retap_packets(cf);
+    /* cf_retap_packets(cf); */
     remove_tap_listener(sainfo);
 
     /* SEQ_ANALYSIS_DEBUG("%d items", g_queue_get_length(sainfo->items)); */
@@ -514,7 +514,7 @@ sequence_analysis_dump_to_file(const char *pathname, seq_analysis_info_t *sainfo
 
     of = ws_fopen(pathname, "w");
     if (of==NULL) {
-        open_failure_alert_box(pathname, errno, TRUE);
+        /* open_failure_alert_box(pathname, errno, TRUE); */
         return FALSE;
     }
 
diff --git a/ui/tap-sequence-analysis.h b/ui/tap-sequence-analysis.h
index 39b0983..51ff40f 100644
--- a/ui/tap-sequence-analysis.h
+++ b/ui/tap-sequence-analysis.h
@@ -91,6 +91,10 @@ typedef struct _seq_analysis_info {
 #define SEQ_ANALYSIS_DEBUG()
 #endif
 
+gboolean seq_analysis_frame_packet(void *, packet_info *, epan_dissect_t *, const void *);
+
+gboolean seq_analysis_tcp_packet(void *, packet_info *, epan_dissect_t *, const void *);
+
 /** Create and initialize a seq_analysis_info_t struct
  * @return A pointer to a newly allocated seq_analysis_info_t struct.
  */
diff --git a/ui/voip_calls.c b/ui/voip_calls.c
index 6cd70d7..f54c6aa 100644
--- a/ui/voip_calls.c
+++ b/ui/voip_calls.c
@@ -65,8 +65,10 @@
 #include "ui/ui_util.h"
 #include "ui/voip_calls.h"
 
-#define DUMP_PTR1(p) printf("#=> %p\n",(void *)p)
-#define DUMP_PTR2(p) printf("==> %p\n",(void *)p)
+#define DUMP_PTR1(p) fprintf(stderr, "#=> %p\n",(void *)p)
+#define DUMP_PTR2(p) fprintf(stderr, "==> %p\n",(void *)p)
+
+#define simple_dialog(...)
 
 const char *voip_call_state_name[8]={
     "",
diff --git a/epan/uat-int.h b/epan/uat-int.h
index 2624779..5be9e8b 100644
--- a/epan/uat-int.h
+++ b/epan/uat-int.h
@@ -130,6 +130,9 @@ gboolean uat_save(uat_t *uat, char **error);
  */
 void uat_load_all(void);
 
+WS_DLL_PUBLIC
+char *uat_strfld(void *rec, uat_field_t *f);
+
 /**
  * Exposes the array of valid records to the UAT consumer (dissectors), updating
  * the contents of 'data_ptr' and 'num_items_ptr' (see 'uat_new').
diff --git a/epan/uat.c b/epan/uat.c
index 92fac8f..1867eee 100644
--- a/epan/uat.c
+++ b/epan/uat.c
@@ -262,6 +262,43 @@ uat_t* uat_get_table_by_name(const char* name) {
     return NULL;
 }
 
+/* fld_tostr() from gtk/uat_gui.c */
+char *uat_strfld(void *rec, uat_field_t *f) {
+    guint        len;
+    char       *ptr;
+    char       *out;
+
+    f->cb.tostr(rec, &ptr, &len, f->cbdata.tostr, f->fld_data);
+
+    switch(f->mode) {
+        case PT_TXTMOD_NONE:
+        case PT_TXTMOD_STRING:
+        case PT_TXTMOD_ENUM:
+        case PT_TXTMOD_FILENAME:
+        case PT_TXTMOD_DIRECTORYNAME:
+            out = g_strndup(ptr, len);
+            break;
+        case PT_TXTMOD_HEXBYTES: {
+            GString *s = g_string_sized_new( len*2 + 1 );
+            guint i;
+
+            for (i=0; i<len;i++) g_string_append_printf(s, "%.2X", ((const guint8*)ptr)[i]);
+
+            out = g_strdup(s->str);
+
+            g_string_free(s, TRUE);
+            break;
+        }
+        default:
+            g_assert_not_reached();
+            out = NULL;
+            break;
+    }
+
+    g_free(ptr);
+    return out;
+}
+
 static void putfld(FILE* fp, void* rec, uat_field_t* f) {
     guint fld_len;
     char* fld_ptr;
diff --git a/CMakeLists.txt b/CMakeLists.txt
index e669c46..e447609 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -2300,6 +2300,7 @@ endif()
 if(BUILD_sharkd)
 	set(sharkd_LIBS
 		ui
+		wscodecs
 		${LIBEPAN_LIBS}
 		${APPLE_CORE_FOUNDATION_LIBRARY}
 		${APPLE_SYSTEM_CONFIGURATION_LIBRARY}
diff --git a/Makefile.am b/Makefile.am
index ab43234..a6a86fa 100644
--- a/Makefile.am
+++ b/Makefile.am
@@ -595,6 +595,7 @@ sharkd_LDFLAGS = $(AM_LDFLAGS) $(EXTRALINKFLAGS)
 sharkd_LDADD = \
 	ui/cli/libcliui.a		\
 	ui/libui.a			\
+	codecs/libwscodecs.la		\
 	wiretap/libwiretap.la		\
 	epan/libwireshark.la		\
 	wsutil/libwsutil.la		\
@@ -910,6 +911,7 @@ SUBDIRS = \
 	packaging		\
 	help			\
 	ui			\
+	codecs			\
 	@wireshark_SUBDIRS@	\
 	ui/cli			\
 	randpkt_core		\
diff --git a/configure.ac b/configure.ac
index 166c507..96e33a0 100644
--- a/configure.ac
+++ b/configure.ac
@@ -1432,19 +1432,19 @@ if test "$have_gtk" = "yes" -a "$have_qt" = "yes" ; then
 
 	wireshark_bin="wireshark\$(EXEEXT) wireshark-gtk\$(EXEEXT)"
 	wireshark_man="wireshark.1"
-	wireshark_SUBDIRS="codecs ui/qt ui/gtk"
+	wireshark_SUBDIRS="ui/qt ui/gtk"
 elif test "$have_gtk" = "no" -a "$have_qt" = "yes" ; then
 	# We don't have GTK+ but we have Qt.
 
 	wireshark_bin="wireshark\$(EXEEXT)"
 	wireshark_man="wireshark.1"
-	wireshark_SUBDIRS="codecs ui/qt"
+	wireshark_SUBDIRS="ui/qt"
 elif test "$have_gtk" = "yes" -a "$have_qt" = "no" ; then
 	# We have GTK+ but not Qt.
 
 	wireshark_bin="wireshark-gtk\$(EXEEXT)"
 	wireshark_man="wireshark.1"
-	wireshark_SUBDIRS="codecs ui/gtk"
+	wireshark_SUBDIRS="ui/gtk"
 	OSX_APP_FLAGS="$OSX_APP_FLAGS -gtk"
 	OSX_DMG_FLAGS="-gtk"
 elif test "$have_gtk" = "no" -a "$have_qt" = "no" ; then
diff --git a/sharkd.c b/sharkd.c
index 6ad971b..8ff9ed0 100644
--- a/sharkd.c
+++ b/sharkd.c
@@ -65,6 +65,8 @@
 #include <epan/epan_dissect.h>
 #include <epan/tap.h>
 
+#include <codecs/codecs.h>
+
 #include "log.h"
 
 #include <wsutil/str_util.h>
@@ -198,6 +200,8 @@ main(int argc, char *argv[])
   register_all_wiretap_modules();
 #endif
 
+  register_all_codecs();
+
   /* Register all dissectors; we must do this before checking for the
      "-G" flag, as the "-G" flag dumps information registered by the
      dissectors, and we must do it before we read the preferences, in
